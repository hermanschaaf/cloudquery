// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/heroku/client (interfaces: HerokuService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v5 "github.com/heroku/heroku-go/v5"
)

// MockHerokuService is a mock of HerokuService interface.
type MockHerokuService struct {
	ctrl     *gomock.Controller
	recorder *MockHerokuServiceMockRecorder
}

// MockHerokuServiceMockRecorder is the mock recorder for MockHerokuService.
type MockHerokuServiceMockRecorder struct {
	mock *MockHerokuService
}

// NewMockHerokuService creates a new mock instance.
func NewMockHerokuService(ctrl *gomock.Controller) *MockHerokuService {
	mock := &MockHerokuService{ctrl: ctrl}
	mock.recorder = &MockHerokuServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHerokuService) EXPECT() *MockHerokuServiceMockRecorder {
	return m.recorder
}

// AccountFeatureList mocks base method.
func (m *MockHerokuService) AccountFeatureList(arg0 context.Context, arg1 *v5.ListRange) (v5.AccountFeatureListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountFeatureList", arg0, arg1)
	ret0, _ := ret[0].(v5.AccountFeatureListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountFeatureList indicates an expected call of AccountFeatureList.
func (mr *MockHerokuServiceMockRecorder) AccountFeatureList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountFeatureList", reflect.TypeOf((*MockHerokuService)(nil).AccountFeatureList), arg0, arg1)
}

// AddOnAttachmentList mocks base method.
func (m *MockHerokuService) AddOnAttachmentList(arg0 context.Context, arg1 *v5.ListRange) (v5.AddOnAttachmentListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnAttachmentList", arg0, arg1)
	ret0, _ := ret[0].(v5.AddOnAttachmentListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnAttachmentList indicates an expected call of AddOnAttachmentList.
func (mr *MockHerokuServiceMockRecorder) AddOnAttachmentList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnAttachmentList", reflect.TypeOf((*MockHerokuService)(nil).AddOnAttachmentList), arg0, arg1)
}

// AddOnConfigList mocks base method.
func (m *MockHerokuService) AddOnConfigList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AddOnConfigListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnConfigList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AddOnConfigListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnConfigList indicates an expected call of AddOnConfigList.
func (mr *MockHerokuServiceMockRecorder) AddOnConfigList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnConfigList", reflect.TypeOf((*MockHerokuService)(nil).AddOnConfigList), arg0, arg1, arg2)
}

// AddOnList mocks base method.
func (m *MockHerokuService) AddOnList(arg0 context.Context, arg1 *v5.ListRange) (v5.AddOnListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnList", arg0, arg1)
	ret0, _ := ret[0].(v5.AddOnListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnList indicates an expected call of AddOnList.
func (mr *MockHerokuServiceMockRecorder) AddOnList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnList", reflect.TypeOf((*MockHerokuService)(nil).AddOnList), arg0, arg1)
}

// AddOnRegionCapabilityList mocks base method.
func (m *MockHerokuService) AddOnRegionCapabilityList(arg0 context.Context, arg1 *v5.ListRange) (v5.AddOnRegionCapabilityListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnRegionCapabilityList", arg0, arg1)
	ret0, _ := ret[0].(v5.AddOnRegionCapabilityListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnRegionCapabilityList indicates an expected call of AddOnRegionCapabilityList.
func (mr *MockHerokuServiceMockRecorder) AddOnRegionCapabilityList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnRegionCapabilityList", reflect.TypeOf((*MockHerokuService)(nil).AddOnRegionCapabilityList), arg0, arg1)
}

// AddOnServiceList mocks base method.
func (m *MockHerokuService) AddOnServiceList(arg0 context.Context, arg1 *v5.ListRange) (v5.AddOnServiceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnServiceList", arg0, arg1)
	ret0, _ := ret[0].(v5.AddOnServiceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnServiceList indicates an expected call of AddOnServiceList.
func (mr *MockHerokuServiceMockRecorder) AddOnServiceList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnServiceList", reflect.TypeOf((*MockHerokuService)(nil).AddOnServiceList), arg0, arg1)
}

// AddOnWebhookDeliveryList mocks base method.
func (m *MockHerokuService) AddOnWebhookDeliveryList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AddOnWebhookDeliveryListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnWebhookDeliveryList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AddOnWebhookDeliveryListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnWebhookDeliveryList indicates an expected call of AddOnWebhookDeliveryList.
func (mr *MockHerokuServiceMockRecorder) AddOnWebhookDeliveryList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnWebhookDeliveryList", reflect.TypeOf((*MockHerokuService)(nil).AddOnWebhookDeliveryList), arg0, arg1, arg2)
}

// AddOnWebhookEventList mocks base method.
func (m *MockHerokuService) AddOnWebhookEventList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AddOnWebhookEventListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnWebhookEventList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AddOnWebhookEventListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnWebhookEventList indicates an expected call of AddOnWebhookEventList.
func (mr *MockHerokuServiceMockRecorder) AddOnWebhookEventList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnWebhookEventList", reflect.TypeOf((*MockHerokuService)(nil).AddOnWebhookEventList), arg0, arg1, arg2)
}

// AddOnWebhookList mocks base method.
func (m *MockHerokuService) AddOnWebhookList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AddOnWebhookListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOnWebhookList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AddOnWebhookListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOnWebhookList indicates an expected call of AddOnWebhookList.
func (mr *MockHerokuServiceMockRecorder) AddOnWebhookList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOnWebhookList", reflect.TypeOf((*MockHerokuService)(nil).AddOnWebhookList), arg0, arg1, arg2)
}

// AppFeatureList mocks base method.
func (m *MockHerokuService) AppFeatureList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AppFeatureListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppFeatureList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AppFeatureListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppFeatureList indicates an expected call of AppFeatureList.
func (mr *MockHerokuServiceMockRecorder) AppFeatureList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppFeatureList", reflect.TypeOf((*MockHerokuService)(nil).AppFeatureList), arg0, arg1, arg2)
}

// AppList mocks base method.
func (m *MockHerokuService) AppList(arg0 context.Context, arg1 *v5.ListRange) (v5.AppListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppList", arg0, arg1)
	ret0, _ := ret[0].(v5.AppListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppList indicates an expected call of AppList.
func (mr *MockHerokuServiceMockRecorder) AppList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppList", reflect.TypeOf((*MockHerokuService)(nil).AppList), arg0, arg1)
}

// AppTransferList mocks base method.
func (m *MockHerokuService) AppTransferList(arg0 context.Context, arg1 *v5.ListRange) (v5.AppTransferListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppTransferList", arg0, arg1)
	ret0, _ := ret[0].(v5.AppTransferListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppTransferList indicates an expected call of AppTransferList.
func (mr *MockHerokuServiceMockRecorder) AppTransferList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppTransferList", reflect.TypeOf((*MockHerokuService)(nil).AppTransferList), arg0, arg1)
}

// AppWebhookDeliveryList mocks base method.
func (m *MockHerokuService) AppWebhookDeliveryList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AppWebhookDeliveryListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppWebhookDeliveryList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AppWebhookDeliveryListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppWebhookDeliveryList indicates an expected call of AppWebhookDeliveryList.
func (mr *MockHerokuServiceMockRecorder) AppWebhookDeliveryList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppWebhookDeliveryList", reflect.TypeOf((*MockHerokuService)(nil).AppWebhookDeliveryList), arg0, arg1, arg2)
}

// AppWebhookEventList mocks base method.
func (m *MockHerokuService) AppWebhookEventList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AppWebhookEventListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppWebhookEventList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AppWebhookEventListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppWebhookEventList indicates an expected call of AppWebhookEventList.
func (mr *MockHerokuServiceMockRecorder) AppWebhookEventList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppWebhookEventList", reflect.TypeOf((*MockHerokuService)(nil).AppWebhookEventList), arg0, arg1, arg2)
}

// AppWebhookList mocks base method.
func (m *MockHerokuService) AppWebhookList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.AppWebhookListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppWebhookList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.AppWebhookListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppWebhookList indicates an expected call of AppWebhookList.
func (mr *MockHerokuServiceMockRecorder) AppWebhookList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppWebhookList", reflect.TypeOf((*MockHerokuService)(nil).AppWebhookList), arg0, arg1, arg2)
}

// ArchiveList mocks base method.
func (m *MockHerokuService) ArchiveList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (*v5.Archive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v5.Archive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveList indicates an expected call of ArchiveList.
func (mr *MockHerokuServiceMockRecorder) ArchiveList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveList", reflect.TypeOf((*MockHerokuService)(nil).ArchiveList), arg0, arg1, arg2)
}

// AuditTrailEventList mocks base method.
func (m *MockHerokuService) AuditTrailEventList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (*v5.AuditTrailEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditTrailEventList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v5.AuditTrailEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditTrailEventList indicates an expected call of AuditTrailEventList.
func (mr *MockHerokuServiceMockRecorder) AuditTrailEventList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditTrailEventList", reflect.TypeOf((*MockHerokuService)(nil).AuditTrailEventList), arg0, arg1, arg2)
}

// BuildList mocks base method.
func (m *MockHerokuService) BuildList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.BuildListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.BuildListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildList indicates an expected call of BuildList.
func (mr *MockHerokuServiceMockRecorder) BuildList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildList", reflect.TypeOf((*MockHerokuService)(nil).BuildList), arg0, arg1, arg2)
}

// BuildpackInstallationList mocks base method.
func (m *MockHerokuService) BuildpackInstallationList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.BuildpackInstallationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildpackInstallationList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.BuildpackInstallationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildpackInstallationList indicates an expected call of BuildpackInstallationList.
func (mr *MockHerokuServiceMockRecorder) BuildpackInstallationList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildpackInstallationList", reflect.TypeOf((*MockHerokuService)(nil).BuildpackInstallationList), arg0, arg1, arg2)
}

// CollaboratorList mocks base method.
func (m *MockHerokuService) CollaboratorList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.CollaboratorListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollaboratorList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.CollaboratorListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollaboratorList indicates an expected call of CollaboratorList.
func (mr *MockHerokuServiceMockRecorder) CollaboratorList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollaboratorList", reflect.TypeOf((*MockHerokuService)(nil).CollaboratorList), arg0, arg1, arg2)
}

// CreditList mocks base method.
func (m *MockHerokuService) CreditList(arg0 context.Context, arg1 *v5.ListRange) (v5.CreditListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditList", arg0, arg1)
	ret0, _ := ret[0].(v5.CreditListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditList indicates an expected call of CreditList.
func (mr *MockHerokuServiceMockRecorder) CreditList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditList", reflect.TypeOf((*MockHerokuService)(nil).CreditList), arg0, arg1)
}

// DomainList mocks base method.
func (m *MockHerokuService) DomainList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.DomainListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.DomainListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainList indicates an expected call of DomainList.
func (mr *MockHerokuServiceMockRecorder) DomainList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainList", reflect.TypeOf((*MockHerokuService)(nil).DomainList), arg0, arg1, arg2)
}

// DynoList mocks base method.
func (m *MockHerokuService) DynoList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.DynoListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynoList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.DynoListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DynoList indicates an expected call of DynoList.
func (mr *MockHerokuServiceMockRecorder) DynoList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynoList", reflect.TypeOf((*MockHerokuService)(nil).DynoList), arg0, arg1, arg2)
}

// DynoSizeList mocks base method.
func (m *MockHerokuService) DynoSizeList(arg0 context.Context, arg1 *v5.ListRange) (v5.DynoSizeListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynoSizeList", arg0, arg1)
	ret0, _ := ret[0].(v5.DynoSizeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DynoSizeList indicates an expected call of DynoSizeList.
func (mr *MockHerokuServiceMockRecorder) DynoSizeList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynoSizeList", reflect.TypeOf((*MockHerokuService)(nil).DynoSizeList), arg0, arg1)
}

// EnterpriseAccountList mocks base method.
func (m *MockHerokuService) EnterpriseAccountList(arg0 context.Context, arg1 *v5.ListRange) (v5.EnterpriseAccountListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterpriseAccountList", arg0, arg1)
	ret0, _ := ret[0].(v5.EnterpriseAccountListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterpriseAccountList indicates an expected call of EnterpriseAccountList.
func (mr *MockHerokuServiceMockRecorder) EnterpriseAccountList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterpriseAccountList", reflect.TypeOf((*MockHerokuService)(nil).EnterpriseAccountList), arg0, arg1)
}

// EnterpriseAccountMemberList mocks base method.
func (m *MockHerokuService) EnterpriseAccountMemberList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.EnterpriseAccountMemberListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterpriseAccountMemberList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.EnterpriseAccountMemberListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterpriseAccountMemberList indicates an expected call of EnterpriseAccountMemberList.
func (mr *MockHerokuServiceMockRecorder) EnterpriseAccountMemberList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterpriseAccountMemberList", reflect.TypeOf((*MockHerokuService)(nil).EnterpriseAccountMemberList), arg0, arg1, arg2)
}

// FormationList mocks base method.
func (m *MockHerokuService) FormationList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.FormationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormationList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.FormationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormationList indicates an expected call of FormationList.
func (mr *MockHerokuServiceMockRecorder) FormationList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormationList", reflect.TypeOf((*MockHerokuService)(nil).FormationList), arg0, arg1, arg2)
}

// InboundRulesetList mocks base method.
func (m *MockHerokuService) InboundRulesetList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.InboundRulesetListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboundRulesetList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.InboundRulesetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InboundRulesetList indicates an expected call of InboundRulesetList.
func (mr *MockHerokuServiceMockRecorder) InboundRulesetList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboundRulesetList", reflect.TypeOf((*MockHerokuService)(nil).InboundRulesetList), arg0, arg1, arg2)
}

// InvoiceList mocks base method.
func (m *MockHerokuService) InvoiceList(arg0 context.Context, arg1 *v5.ListRange) (v5.InvoiceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvoiceList", arg0, arg1)
	ret0, _ := ret[0].(v5.InvoiceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvoiceList indicates an expected call of InvoiceList.
func (mr *MockHerokuServiceMockRecorder) InvoiceList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvoiceList", reflect.TypeOf((*MockHerokuService)(nil).InvoiceList), arg0, arg1)
}

// KeyList mocks base method.
func (m *MockHerokuService) KeyList(arg0 context.Context, arg1 *v5.ListRange) (v5.KeyListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyList", arg0, arg1)
	ret0, _ := ret[0].(v5.KeyListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyList indicates an expected call of KeyList.
func (mr *MockHerokuServiceMockRecorder) KeyList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyList", reflect.TypeOf((*MockHerokuService)(nil).KeyList), arg0, arg1)
}

// LogDrainList mocks base method.
func (m *MockHerokuService) LogDrainList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.LogDrainListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDrainList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.LogDrainListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogDrainList indicates an expected call of LogDrainList.
func (mr *MockHerokuServiceMockRecorder) LogDrainList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDrainList", reflect.TypeOf((*MockHerokuService)(nil).LogDrainList), arg0, arg1, arg2)
}

// OAuthAuthorizationList mocks base method.
func (m *MockHerokuService) OAuthAuthorizationList(arg0 context.Context, arg1 *v5.ListRange) (v5.OAuthAuthorizationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthAuthorizationList", arg0, arg1)
	ret0, _ := ret[0].(v5.OAuthAuthorizationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthAuthorizationList indicates an expected call of OAuthAuthorizationList.
func (mr *MockHerokuServiceMockRecorder) OAuthAuthorizationList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthAuthorizationList", reflect.TypeOf((*MockHerokuService)(nil).OAuthAuthorizationList), arg0, arg1)
}

// OAuthClientList mocks base method.
func (m *MockHerokuService) OAuthClientList(arg0 context.Context, arg1 *v5.ListRange) (v5.OAuthClientListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthClientList", arg0, arg1)
	ret0, _ := ret[0].(v5.OAuthClientListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthClientList indicates an expected call of OAuthClientList.
func (mr *MockHerokuServiceMockRecorder) OAuthClientList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthClientList", reflect.TypeOf((*MockHerokuService)(nil).OAuthClientList), arg0, arg1)
}

// OutboundRulesetList mocks base method.
func (m *MockHerokuService) OutboundRulesetList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.OutboundRulesetListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutboundRulesetList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.OutboundRulesetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutboundRulesetList indicates an expected call of OutboundRulesetList.
func (mr *MockHerokuServiceMockRecorder) OutboundRulesetList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutboundRulesetList", reflect.TypeOf((*MockHerokuService)(nil).OutboundRulesetList), arg0, arg1, arg2)
}

// PeeringList mocks base method.
func (m *MockHerokuService) PeeringList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PeeringListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeeringList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PeeringListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeeringList indicates an expected call of PeeringList.
func (mr *MockHerokuServiceMockRecorder) PeeringList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeeringList", reflect.TypeOf((*MockHerokuService)(nil).PeeringList), arg0, arg1, arg2)
}

// PermissionEntityList mocks base method.
func (m *MockHerokuService) PermissionEntityList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PermissionEntityListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionEntityList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PermissionEntityListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PermissionEntityList indicates an expected call of PermissionEntityList.
func (mr *MockHerokuServiceMockRecorder) PermissionEntityList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionEntityList", reflect.TypeOf((*MockHerokuService)(nil).PermissionEntityList), arg0, arg1, arg2)
}

// PipelineBuildList mocks base method.
func (m *MockHerokuService) PipelineBuildList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PipelineBuildListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineBuildList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PipelineBuildListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineBuildList indicates an expected call of PipelineBuildList.
func (mr *MockHerokuServiceMockRecorder) PipelineBuildList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineBuildList", reflect.TypeOf((*MockHerokuService)(nil).PipelineBuildList), arg0, arg1, arg2)
}

// PipelineCouplingList mocks base method.
func (m *MockHerokuService) PipelineCouplingList(arg0 context.Context, arg1 *v5.ListRange) (v5.PipelineCouplingListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineCouplingList", arg0, arg1)
	ret0, _ := ret[0].(v5.PipelineCouplingListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineCouplingList indicates an expected call of PipelineCouplingList.
func (mr *MockHerokuServiceMockRecorder) PipelineCouplingList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineCouplingList", reflect.TypeOf((*MockHerokuService)(nil).PipelineCouplingList), arg0, arg1)
}

// PipelineDeploymentList mocks base method.
func (m *MockHerokuService) PipelineDeploymentList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PipelineDeploymentListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineDeploymentList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PipelineDeploymentListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineDeploymentList indicates an expected call of PipelineDeploymentList.
func (mr *MockHerokuServiceMockRecorder) PipelineDeploymentList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineDeploymentList", reflect.TypeOf((*MockHerokuService)(nil).PipelineDeploymentList), arg0, arg1, arg2)
}

// PipelineList mocks base method.
func (m *MockHerokuService) PipelineList(arg0 context.Context, arg1 *v5.ListRange) (v5.PipelineListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineList", arg0, arg1)
	ret0, _ := ret[0].(v5.PipelineListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineList indicates an expected call of PipelineList.
func (mr *MockHerokuServiceMockRecorder) PipelineList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineList", reflect.TypeOf((*MockHerokuService)(nil).PipelineList), arg0, arg1)
}

// PipelinePromotionTargetList mocks base method.
func (m *MockHerokuService) PipelinePromotionTargetList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PipelinePromotionTargetListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelinePromotionTargetList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PipelinePromotionTargetListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelinePromotionTargetList indicates an expected call of PipelinePromotionTargetList.
func (mr *MockHerokuServiceMockRecorder) PipelinePromotionTargetList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelinePromotionTargetList", reflect.TypeOf((*MockHerokuService)(nil).PipelinePromotionTargetList), arg0, arg1, arg2)
}

// PipelineReleaseList mocks base method.
func (m *MockHerokuService) PipelineReleaseList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.PipelineReleaseListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineReleaseList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.PipelineReleaseListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineReleaseList indicates an expected call of PipelineReleaseList.
func (mr *MockHerokuServiceMockRecorder) PipelineReleaseList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineReleaseList", reflect.TypeOf((*MockHerokuService)(nil).PipelineReleaseList), arg0, arg1, arg2)
}

// RegionList mocks base method.
func (m *MockHerokuService) RegionList(arg0 context.Context, arg1 *v5.ListRange) (v5.RegionListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionList", arg0, arg1)
	ret0, _ := ret[0].(v5.RegionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegionList indicates an expected call of RegionList.
func (mr *MockHerokuServiceMockRecorder) RegionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionList", reflect.TypeOf((*MockHerokuService)(nil).RegionList), arg0, arg1)
}

// ReleaseList mocks base method.
func (m *MockHerokuService) ReleaseList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.ReleaseListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.ReleaseListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseList indicates an expected call of ReleaseList.
func (mr *MockHerokuServiceMockRecorder) ReleaseList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseList", reflect.TypeOf((*MockHerokuService)(nil).ReleaseList), arg0, arg1, arg2)
}

// ReviewAppList mocks base method.
func (m *MockHerokuService) ReviewAppList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.ReviewAppListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewAppList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.ReviewAppListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewAppList indicates an expected call of ReviewAppList.
func (mr *MockHerokuServiceMockRecorder) ReviewAppList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewAppList", reflect.TypeOf((*MockHerokuService)(nil).ReviewAppList), arg0, arg1, arg2)
}

// SSLEndpointList mocks base method.
func (m *MockHerokuService) SSLEndpointList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.SSLEndpointListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSLEndpointList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.SSLEndpointListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSLEndpointList indicates an expected call of SSLEndpointList.
func (mr *MockHerokuServiceMockRecorder) SSLEndpointList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSLEndpointList", reflect.TypeOf((*MockHerokuService)(nil).SSLEndpointList), arg0, arg1, arg2)
}

// SniEndpointList mocks base method.
func (m *MockHerokuService) SniEndpointList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.SniEndpointListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SniEndpointList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.SniEndpointListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SniEndpointList indicates an expected call of SniEndpointList.
func (mr *MockHerokuServiceMockRecorder) SniEndpointList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SniEndpointList", reflect.TypeOf((*MockHerokuService)(nil).SniEndpointList), arg0, arg1, arg2)
}

// SpaceAppAccessList mocks base method.
func (m *MockHerokuService) SpaceAppAccessList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.SpaceAppAccessListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceAppAccessList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.SpaceAppAccessListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceAppAccessList indicates an expected call of SpaceAppAccessList.
func (mr *MockHerokuServiceMockRecorder) SpaceAppAccessList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceAppAccessList", reflect.TypeOf((*MockHerokuService)(nil).SpaceAppAccessList), arg0, arg1, arg2)
}

// SpaceList mocks base method.
func (m *MockHerokuService) SpaceList(arg0 context.Context, arg1 *v5.ListRange) (v5.SpaceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceList", arg0, arg1)
	ret0, _ := ret[0].(v5.SpaceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceList indicates an expected call of SpaceList.
func (mr *MockHerokuServiceMockRecorder) SpaceList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceList", reflect.TypeOf((*MockHerokuService)(nil).SpaceList), arg0, arg1)
}

// StackList mocks base method.
func (m *MockHerokuService) StackList(arg0 context.Context, arg1 *v5.ListRange) (v5.StackListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackList", arg0, arg1)
	ret0, _ := ret[0].(v5.StackListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackList indicates an expected call of StackList.
func (mr *MockHerokuServiceMockRecorder) StackList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackList", reflect.TypeOf((*MockHerokuService)(nil).StackList), arg0, arg1)
}

// TeamAppCollaboratorList mocks base method.
func (m *MockHerokuService) TeamAppCollaboratorList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamAppCollaboratorListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamAppCollaboratorList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamAppCollaboratorListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamAppCollaboratorList indicates an expected call of TeamAppCollaboratorList.
func (mr *MockHerokuServiceMockRecorder) TeamAppCollaboratorList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamAppCollaboratorList", reflect.TypeOf((*MockHerokuService)(nil).TeamAppCollaboratorList), arg0, arg1, arg2)
}

// TeamAppPermissionList mocks base method.
func (m *MockHerokuService) TeamAppPermissionList(arg0 context.Context, arg1 *v5.ListRange) (v5.TeamAppPermissionListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamAppPermissionList", arg0, arg1)
	ret0, _ := ret[0].(v5.TeamAppPermissionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamAppPermissionList indicates an expected call of TeamAppPermissionList.
func (mr *MockHerokuServiceMockRecorder) TeamAppPermissionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamAppPermissionList", reflect.TypeOf((*MockHerokuService)(nil).TeamAppPermissionList), arg0, arg1)
}

// TeamFeatureList mocks base method.
func (m *MockHerokuService) TeamFeatureList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamFeatureListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamFeatureList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamFeatureListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamFeatureList indicates an expected call of TeamFeatureList.
func (mr *MockHerokuServiceMockRecorder) TeamFeatureList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamFeatureList", reflect.TypeOf((*MockHerokuService)(nil).TeamFeatureList), arg0, arg1, arg2)
}

// TeamInvitationList mocks base method.
func (m *MockHerokuService) TeamInvitationList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamInvitationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamInvitationList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamInvitationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamInvitationList indicates an expected call of TeamInvitationList.
func (mr *MockHerokuServiceMockRecorder) TeamInvitationList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamInvitationList", reflect.TypeOf((*MockHerokuService)(nil).TeamInvitationList), arg0, arg1, arg2)
}

// TeamInvoiceList mocks base method.
func (m *MockHerokuService) TeamInvoiceList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamInvoiceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamInvoiceList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamInvoiceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamInvoiceList indicates an expected call of TeamInvoiceList.
func (mr *MockHerokuServiceMockRecorder) TeamInvoiceList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamInvoiceList", reflect.TypeOf((*MockHerokuService)(nil).TeamInvoiceList), arg0, arg1, arg2)
}

// TeamList mocks base method.
func (m *MockHerokuService) TeamList(arg0 context.Context, arg1 *v5.ListRange) (v5.TeamListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamList", arg0, arg1)
	ret0, _ := ret[0].(v5.TeamListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamList indicates an expected call of TeamList.
func (mr *MockHerokuServiceMockRecorder) TeamList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamList", reflect.TypeOf((*MockHerokuService)(nil).TeamList), arg0, arg1)
}

// TeamMemberList mocks base method.
func (m *MockHerokuService) TeamMemberList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamMemberListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamMemberList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamMemberListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamMemberList indicates an expected call of TeamMemberList.
func (mr *MockHerokuServiceMockRecorder) TeamMemberList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamMemberList", reflect.TypeOf((*MockHerokuService)(nil).TeamMemberList), arg0, arg1, arg2)
}

// TeamPreferencesList mocks base method.
func (m *MockHerokuService) TeamPreferencesList(arg0 context.Context, arg1 string) (*v5.TeamPreferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamPreferencesList", arg0, arg1)
	ret0, _ := ret[0].(*v5.TeamPreferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamPreferencesList indicates an expected call of TeamPreferencesList.
func (mr *MockHerokuServiceMockRecorder) TeamPreferencesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamPreferencesList", reflect.TypeOf((*MockHerokuService)(nil).TeamPreferencesList), arg0, arg1)
}

// TeamSpaceList mocks base method.
func (m *MockHerokuService) TeamSpaceList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.TeamSpaceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamSpaceList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.TeamSpaceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamSpaceList indicates an expected call of TeamSpaceList.
func (mr *MockHerokuServiceMockRecorder) TeamSpaceList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamSpaceList", reflect.TypeOf((*MockHerokuService)(nil).TeamSpaceList), arg0, arg1, arg2)
}

// TestCaseList mocks base method.
func (m *MockHerokuService) TestCaseList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestCaseList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestCaseList indicates an expected call of TestCaseList.
func (mr *MockHerokuServiceMockRecorder) TestCaseList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestCaseList", reflect.TypeOf((*MockHerokuService)(nil).TestCaseList), arg0, arg1, arg2)
}

// TestNodeList mocks base method.
func (m *MockHerokuService) TestNodeList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestNodeList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestNodeList indicates an expected call of TestNodeList.
func (mr *MockHerokuServiceMockRecorder) TestNodeList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestNodeList", reflect.TypeOf((*MockHerokuService)(nil).TestNodeList), arg0, arg1, arg2)
}

// TestRunList mocks base method.
func (m *MockHerokuService) TestRunList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRunList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestRunList indicates an expected call of TestRunList.
func (mr *MockHerokuServiceMockRecorder) TestRunList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRunList", reflect.TypeOf((*MockHerokuService)(nil).TestRunList), arg0, arg1, arg2)
}

// UserPreferencesList mocks base method.
func (m *MockHerokuService) UserPreferencesList(arg0 context.Context, arg1 string) (*v5.UserPreferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPreferencesList", arg0, arg1)
	ret0, _ := ret[0].(*v5.UserPreferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPreferencesList indicates an expected call of UserPreferencesList.
func (mr *MockHerokuServiceMockRecorder) UserPreferencesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPreferencesList", reflect.TypeOf((*MockHerokuService)(nil).UserPreferencesList), arg0, arg1)
}

// VPNConnectionList mocks base method.
func (m *MockHerokuService) VPNConnectionList(arg0 context.Context, arg1 string, arg2 *v5.ListRange) (v5.VPNConnectionListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VPNConnectionList", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.VPNConnectionListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VPNConnectionList indicates an expected call of VPNConnectionList.
func (mr *MockHerokuServiceMockRecorder) VPNConnectionList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VPNConnectionList", reflect.TypeOf((*MockHerokuService)(nil).VPNConnectionList), arg0, arg1, arg2)
}
